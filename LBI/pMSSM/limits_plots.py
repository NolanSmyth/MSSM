from simulator import get_simulator_with_more_observables, theta_addunits
import jax
import numpy as onp
import matplotlib.pyplot as plt
import corner


def plot_direct_detection_limits(
    results, logger=None, spin_dependent=True, filename=None
):
    if filename is None:
        filename = "direct_detection.png"
    xenon_1T_SD_MAP = [
        [6.2737021939809505, 4.380471342761328e-39],
        [6.82626862406252, 1.9167162831669645e-39],
        [7.426664707495541, 1.0006479835944972e-39],
        [8.080359051533343, 4.750251381626992e-40],
        [8.791233765576216, 2.4032104640750255e-40],
        [9.56372522639818, 1.4138740833771172e-40],
        [10.403848758081189, 8.633209550249883e-41],
        [11.317418175440388, 5.536246052854546e-41],
        [12.310790805342048, 3.7438579553475374e-41],
        [13.390958544870527, 2.651908643349145e-41],
        [14.565397536782397, 1.9829692195482494e-41],
        [15.842533750056221, 1.528188827642876e-41],
        [17.231300548311538, 1.215989083814171e-41],
        [18.74144586457986, 9.972187666456379e-42],
        [20.383536481877655, 8.435111915470964e-42],
        [22.169219690082468, 7.279521341538366e-42],
        [24.110936423456078, 6.447298411461513e-42],
        [26.222345531540906, 5.83941887433116e-42],
        [28.51832121611489, 5.385671063680235e-42],
        [31.01484851196154, 5.0887220271330704e-42],
        [33.72955165547128, 4.8920466148741385e-42],
        [36.681557031866284, 4.7662395125222075e-42],
        [39.89150825425987, 4.7195129328332205e-42],
        [43.38205660704932, 4.724260655907516e-42],
        [47.177575465405724, 4.8010597373115506e-42],
        [51.30485521023882, 4.92559130141295e-42],
        [55.79294701417815, 5.090117907865377e-42],
        [60.67326309436825, 5.313152873417803e-42],
        [65.98023847834199, 5.576451678765453e-42],
        [71.75096359356499, 5.909376474013769e-42],
        [78.02505179147126, 6.434297030275535e-42],
        [84.84930959792628, 6.808859300840624e-42],
        [92.27044876725182, 7.203340775479984e-42],
        [100.34043614167103, 7.647300213144636e-42],
        [109.11564589715884, 8.186388392546072e-42],
        [118.65778466407795, 8.821591774950953e-42],
        [129.03594817246187, 9.327252765457268e-42],
        [140.32048084611432, 1.0009843883747205e-41],
        [152.59139984978222, 1.079489342787573e-41],
        [165.93817655183176, 1.1340954093852872e-41],
        [180.447264128381, 1.245282100568562e-41],
        [196.2286557589485, 1.3278750888127528e-41],
        [213.3894605707368, 1.4240777648058588e-41],
        [232.04852886019202, 1.553224638870232e-41],
        [252.34262677400844, 1.6581922244289378e-41],
        [274.40966437306196, 1.7895925710528648e-41],
        [298.4060589381614, 1.9352259949535066e-41],
        [324.4990135473136, 2.1115634764831174e-41],
        [352.8778039987828, 2.26108474959387e-41],
        [383.73660533287386, 2.439345208407466e-41],
        [417.2975139732447, 2.5970047042486574e-41],
        [453.78706060696555, 2.827865757086679e-41],
        [493.462698365402, 3.1249352605993485e-41],
        [536.611474331295, 3.411131368787958e-41],
        [583.5417537964834, 3.639281084374553e-41],
        [634.5658569810952, 3.9849194501741336e-41],
        [690.0532041839352, 4.345961216004841e-41],
        [750.407593828256, 4.592397502528895e-41],
        [816.0094376591944, 5.153281548578663e-41],
        [887.3699220508599, 5.546857800358868e-41],
        [954.0017717045127, 5.913217117796076e-41],
    ]
    xenon_1T_SD_MAP = onp.array(xenon_1T_SD_MAP)

    xenon_1T_SD_MAP_upper_1sig = [
        [6.270672894608104, 9.323393304597517e-39],
        [6.4661779257505225, 6.834159186686746e-39],
        [6.770862316849728, 4.349994825372924e-39],
        [7.713762253698013, 1.3670569402128466e-39],
        [8.296315379033329, 7.773273511847843e-40],
        [8.587345936459986, 6.029465541544091e-40],
        [9.060320097580608, 4.177687875564222e-40],
        [11.225846253459054, 1.2071382961512121e-40],
        [11.753105623371685, 9.632810730680646e-41],
        [12.735751554780874, 6.771066688524378e-41],
        [15.202919915825548, 3.5573532656435303e-41],
        [18.03116673624713, 2.2037855335887994e-41],
        [23.021416783161026, 1.3791339790554812e-41],
        [26.31088984916732, 1.165498037314042e-41],
        [28.943864066017376, 1.0717211667269808e-41],
        [32.82620950596254, 9.998035107169355e-42],
        [46.2653027545907, 9.889862402148158e-42],
        [52.06866582945995, 1.0329704115348067e-41],
        [57.0566423261668, 1.0786378211424966e-41],
        [64.45777368716024, 1.1589455067629188e-41],
        [70.63194055211761, 1.2274047520805682e-41],
        [198.14426031687307, 2.696325420656388e-41],
        [211.67424475823162, 2.854910201570226e-41],
        [240.95565994100494, 3.200532791860878e-41],
        [291.5311090577602, 3.7988428547247477e-41],
        [319.4500010716529, 4.1385685834542947e-41],
        [350.0425855563167, 4.5086755559400966e-41],
        [377.76281615217925, 4.842258921146878e-41],
        [457.0493083444134, 5.829268735114747e-41],
        [536.3738236583405, 6.819939736670654e-41],
        [601.3303163043341, 7.644473561918792e-41],
        [674.1532367116436, 8.568693902771125e-41],
        [733.1026995095291, 9.334306677974233e-41],
        [809.4512131829797, 1.0314526755417554e-40],
        [904.024718775074, 1.1561139910097243e-40],
        [957.2008327916185, 1.2240077845997024e-40],
    ]
    xenon_1T_SD_MAP_upper_1sig = onp.array(xenon_1T_SD_MAP_upper_1sig)

    xenon_1T_SD_MAP_lower_1sig = [
        [7.961305658758178, 2.508820268589553e-40],
        [8.795435844314635, 1.1381628745855697e-40],
        [10.569784100404847, 3.528458364464382e-41],
        [16.913134965711, 6.232494209723864e-42],
        [19.93084869014487, 4.384410945707621e-42],
        [24.86898611006294, 3.174461776925564e-42],
        [28.098179426204684, 2.838416940617352e-42],
        [36.41753800776269, 2.5412496021164464e-42],
        [42.095403387462106, 2.544742016534843e-42],
        [49.78315086391151, 2.6591659261630288e-42],
        [61.6290049669545, 2.9415995450459845e-42],
        [69.62324267201065, 3.160610084871587e-42],
        [76.29219031551334, 3.347308234086518e-42],
        [88.85635701544821, 3.700689833264752e-42],
        [146.94841683771205, 5.36929280544756e-42],
        [169.20052893322898, 6.019965522850312e-42],
        [187.5371868366252, 6.559034558273869e-42],
        [260.26518487418383, 8.728310485599928e-42],
        [437.0032656719669, 1.4181544932816581e-41],
        [520.7255247304837, 1.6830220655090167e-41],
        [583.7869610381631, 1.8865002009813135e-41],
        [654.485328051795, 2.114578935853844e-41],
        [711.7149850448292, 2.3035165576005525e-41],
        [773.9489309029625, 2.509335755298917e-41],
        [841.6247518072271, 2.733544897710864e-41],
        [915.2182974504137, 2.977787126342918e-41],
    ]
    xenon_1T_SD_MAP_lower_1sig = onp.array(xenon_1T_SD_MAP_lower_1sig)

    xenont_1T_SI_MAP = [
        [6.0339837124101505, 4.483595687923282e-44],
        [6.551645007673359, 2.0674194341946528e-44],
        [7.378160404220488, 7.036909689790104e-45],
        [8.461342883045004, 2.3088405845070526e-45],
        [9.9624100937806, 9.606807158865591e-46],
        [11.657882846096552, 3.9215025438792774e-46],
        [13.641903030889745, 2.0436983789899627e-46],
        [15.963577671953688, 1.1720206119839838e-46],
        [18.680371170464014, 6.527684153681701e-47],
        [21.859527622018106, 5.075153813940658e-47],
        [25.579735193554125, 4.44896139646655e-47],
        [29.933073755595796, 3.7609698729368676e-47],
        [35.0272939761988, 3.3630020053914973e-47],
        [40.988484287073526, 3.1918316315721953e-47],
        [47.964191732689336, 3.0980122598818063e-47],
        [56.12707394734554, 3.0767593475443736e-47],
        [65.67917265128816, 3.2632630278192686e-47],
        [76.85691444033904, 3.5562882391749737e-47],
        [89.93696264494203, 3.785714203478611e-47],
        [105.24306509958309, 4.0615941589132794e-47],
        [144.1132893794873, 5.634362070382618e-47],
        [168.63949870930435, 6.900541790662108e-47],
        [197.3397501880448, 8.045519200410355e-47],
        [230.92441155442862, 9.076195466896951e-47],
        [270.2247459062091, 1.0353472052948846e-46],
        [316.21348651943674, 1.1916272892837372e-46],
        [370.0289132346279, 1.4001052516489264e-46],
        [693.8358668191669, 2.7171646621528717e-46],
        [811.9177160602267, 3.025725237658192e-46],
        [932.4845863161174, 3.4704599786431344e-46],
    ]
    xenont_1T_SI_MAP = onp.array(xenont_1T_SI_MAP)

    xenon_1T_SI_MAP_upper_1sig = [
        [5.968080303975475, 1.0699929160264714e-43],
        [7.385065883951943, 1.5252003285432834e-44],
        [7.581065565663755, 1.2032494270600654e-44],
        [8.805119880409135, 3.640902614921723e-45],
        [9.140848864094723, 2.816157244462665e-45],
        [9.66859593973141, 1.934724472853542e-45],
        [10.188615385713076, 1.3964766828555408e-45],
        [10.419956867946553, 1.2281675190586676e-45],
        [11.062873068080277, 8.777719596058514e-46],
        [11.314065340674968, 7.796435492677683e-46],
        [12.193298136134255, 5.40939608333776e-46],
        [13.239572253406068, 3.790460212694705e-46],
        [14.215146465676249, 2.8744770439339716e-46],
        [15.092227634617597, 2.33592568140428e-46],
        [16.204317043869956, 1.879614256174034e-46],
        [18.82069913729067, 1.2786170375545547e-46],
        [21.642483979269276, 9.728313226962483e-47],
        [23.38261246955346, 8.612352085563397e-47],
        [26.06283603498271, 7.49989576042591e-47],
        [30.84269504894739, 6.466930753446702e-47],
        [33.86729086836357, 6.15525247952711e-47],
        [37.327914012918654, 5.975502995404467e-47],
        [46.375755825749756, 5.975502995404467e-47],
        [51.306145635606995, 6.135016228020498e-47],
        [57.40148857473586, 6.403357406559017e-47],
        [70.783198554872, 7.138433011819771e-47],
        [120.87128298940246, 1.0187314840024574e-46],
        [132.72455251195973, 1.0916740897626226e-46],
        [150.1690425112329, 1.205029504352807e-46],
        [169.27172815019014, 1.3301553274718836e-46],
        [204.86408542382145, 1.5734042190177591e-46],
        [234.406876384065, 1.7714378652609077e-46],
        [272.25468893213923, 2.0341944849189965e-46],
        [311.5156621106669, 2.312962297488561e-46],
        [331.97625419896355, 2.45420795931345e-46],
        [367.26996125933147, 2.709043869890936e-46],
        [413.9895946620963, 3.050012725130224e-46],
        [452.8896939181691, 3.3336182212484655e-46],
        [533.9467659927359, 3.943245473350693e-46],
        [606.3902752462762, 4.483631322973343e-46],
        [643.8048381374766, 4.7574332237997455e-46],
        [759.0314283373706, 5.627437150703742e-46],
        [827.2516563387917, 6.150704510164257e-46],
        [894.8809873355499, 6.6565409109048945e-46],
    ]
    xenon_1T_SI_MAP_upper_1sig = onp.array(xenon_1T_SI_MAP_upper_1sig)

    xenon_1T_SI_MAP_lower_1sig = [
        [6.124887251216021, 1.6670211125328825e-44],
        [6.311013404132151, 1.2394444492952227e-44],
        [6.576207123261851, 8.515090957754578e-45],
        [7.412752494209032, 3.1085766350031426e-45],
        [7.552750306545911, 2.6540805173101876e-45],
        [8.048820847975367, 1.572241668138282e-45],
        [8.51351966621398, 1.0280853902868888e-45],
        [8.871264421072034, 7.643902772511898e-46],
        [9.17511790433025, 6.090239834364239e-46],
        [9.632483760385647, 4.4395548576022e-46],
        [10.137907729738016, 3.246942620236955e-46],
        [10.34226520776783, 2.9030152176813124e-46],
        [10.89851753820582, 2.158416633552763e-46],
        [11.745457497711755, 1.4901937500620825e-46],
        [12.626675833473044, 1.0738465422976676e-46],
        [13.339028642094572, 8.612352085563397e-47],
        [14.109157703669046, 6.998773727004712e-47],
        [15.454174387177053, 5.169488907132847e-47],
        [17.7269387462292, 3.598574150605486e-47],
        [19.24803968065798, 3.0222625659831513e-47],
        [25.262653142080648, 2.0290059708289847e-47],
        [27.87879067659616, 1.8625128210508026e-47],
        [29.933073755595796, 1.7727477062923323e-47],
        [33.489223754826504, 1.6707217463187285e-47],
        [36.09172099459948, 1.6219322981178405e-47],
        [39.92877443434483, 1.5902001372362416e-47],
        [49.42175170379977, 1.5902001372362416e-47],
        [55.91743947992401, 1.638035048295578e-47],
        [60.94318720018909, 1.6873088843445904e-47],
        [68.69564088473763, 1.790347771027284e-47],
        [76.66542153560809, 1.8996789331002853e-47],
        [84.07869401836189, 2.0156866209263668e-47],
        [89.2663886658105, 2.0969345930717023e-47],
        [100.12099289295331, 2.2843830988395e-47],
        [111.45821387636757, 2.4885879414194576e-47],
        [121.77927465802901, 2.6843959732095657e-47],
        [134.72611043751994, 2.934004588113755e-47],
        [157.65474388284738, 3.402654119921872e-47],
        [177.70966972855922, 3.8309229615378313e-47],
        [200.315740187946, 4.313095078137052e-47],
        [227.4936839497269, 4.904165444933635e-47],
        [258.3590095738891, 5.576236617920642e-47],
        [291.22431163182273, 6.278079447890149e-47],
        [320.9821566572021, 6.929972082623698e-47],
        [348.5247721880473, 7.49989576042591e-47],
        [374.206249925859, 8.036898835608929e-47],
        [417.09950707101956, 8.959497388354755e-47],
        [444.49492859360777, 9.50662698904501e-47],
        [490.5257179986406, 1.04592604022742e-46],
        [533.9467659927359, 1.1356771134052836e-46],
        [562.6647621905335, 1.1931834275026279e-46],
        [629.5112314161315, 1.3301553274718836e-46],
        [709.5900210177613, 1.497572896577838e-46],
        [773.3665541283884, 1.636824743236627e-46],
        [868.4889097364915, 1.8428406978439633e-46],
        [953.6574697935658, 2.0341944849189965e-46],
    ]
    xenon_1T_SI_MAP_lower_1sig = onp.array(xenon_1T_SI_MAP_lower_1sig)

    def amp_to_xsec(M_chi, amp, proton=True, spin_dependent=True):
        M_prot = 0.938
        M_neut = 0.939
        if proton:
            M_nuc = M_prot
        else:
            M_nuc = M_neut

        if spin_dependent:
            amp_coeff = 3
        else:
            amp_coeff = 1

        xsec = (
            4
            * (M_chi ** 2)
            * (M_nuc ** 2)
            / (onp.pi * (M_chi + M_nuc) ** 2)
            * amp_coeff
            * onp.abs(amp) ** 2
        )
        return xsec

    chi_masses = results["mneut1"]
    proton_si_amps = results["proton_si_amp"]
    proton_sd_amps = results["proton_sd_amp"]
    neutron_si_amps = results["neutron_si_amp"]
    neutron_sd_amps = results["neutron_sd_amp"]

    proton_si_xsec = amp_to_xsec(
        chi_masses, proton_si_amps, proton=True, spin_dependent=False
    )
    proton_sd_xsec = amp_to_xsec(
        chi_masses,
        proton_sd_amps,
        proton=True,
        spin_dependent=True,
    )
    neutron_si_xsec = amp_to_xsec(
        chi_masses,
        neutron_si_amps,
        proton=False,
        spin_dependent=False,
    )
    neutron_sd_xsec = amp_to_xsec(
        chi_masses,
        neutron_sd_amps,
        proton=False,
        spin_dependent=True,
    )

    inv_gev_to_cm = 1.0 / (1.98e-14)

    if spin_dependent:
        plt.plot(*xenont_1T_SI_MAP.T, color="black", label="Xenon 1T")
        plt.plot(
            *xenon_1T_SI_MAP_upper_1sig.T,
            color="black",
            linestyle="--",
            alpha=0.3,
        )
        plt.plot(
            *xenon_1T_SI_MAP_lower_1sig.T,
            color="black",
            label="Xenon 1T (1 sigma)",
            linestyle="--",
            alpha=0.3,
        )
        plt.scatter(
            chi_masses,
            neutron_si_xsec / inv_gev_to_cm ** 2,
            marker=".",
            c=results["pval_xenon1T"],
        )
        plt.yscale("log")
        plt.xlim(20, 900)
        plt.ylim(1e-50, 1e-38)

        plt.xlabel(r"WIMP mass (GeV)")
        plt.ylabel(r"WIMP-neutron $\sigma^{SI}$ (cm$^{2}$)")

        plt.colorbar()
        plt.legend()

    if hasattr(logger, "plot"):
        logger.plot(f"Final Corner Plot of Observables", plt, close_plot=True)
    else:
        plt.savefig(filename)

    plt.clf()
    pass


def plot_observable_corner(X_true, results, logger=None, filename=None):
    if filename is None:
        filename = "observable_corner.png"

    observables_with_nans = onp.array(
        [results["omega"], results["gmuon"], results["mhsm"], results["mneut1"]]
    ).T

    # take out nan values
    nan_mask = ~onp.isnan(observables_with_nans).any(axis=1)
    observables = observables_with_nans[nan_mask]
    observables = onp.array(observables)

    observables[:, 0] = onp.log10(observables[:, 0])  # log of omega h^2
    observables[:, 3] = onp.abs(
        observables[:, 3]
    )  # abs of mchi (idk why it goes negative)

    X_true = onp.array(X_true)
    X_true[:, 0] = onp.log10(X_true[:, 0])  # log of omega h^2
    X_true = onp.append(X_true, [[None]], axis=1)  # true mchi is not knonwn

    ranges = [(-4, 2), (7e-12, 551e-11), (121, 126), (0, 1000)]
    labels = [
        r"$\log\Omega$" + r"$h^2$",  # not sure why i need two strings here for latex
        r"$g_\mu$",
        r"$M_h$",
        r"$M_\chi$",
    ]
    corner.corner(
        onp.array(observables), range=ranges, truths=onp.array(X_true[0]), labels=labels
    )
    if hasattr(logger, "plot"):
        logger.plot(f"Final Corner Plot of Observables", plt, close_plot=True)
    else:
        plt.savefig(filename)

    plt.clf()
    pass


def plot_masses_corner(results, logger=None, filename=None):
    if filename is None:
        filename = "masses_corner.png"

    all_masses = onp.array(
        [
            results["mneut1"],
            results["msel"],
            results["msml"],
            results["mser"],
            results["msmr"],
        ]
    ).T

    # ? What's a negative neutralino mass?
    all_masses = onp.abs(all_masses)

    ranges = [(0, 2000), (0, 2000), (0, 1000), (0, 1000), (0, 1000)]
    # ranges = None
    labels = [
        r"$M_\chi$",
        r"$M_{\tilde{e}_R}$",
        r"$M_{\tilde{e}_L}$",
        r"$M_{\tilde{\mu}_R}$",
        r"$M_{\tilde{\mu}_L}$",
    ]

    corner.corner(
        onp.array(all_masses), range=ranges, labels=labels
    )
    if hasattr(logger, "plot"):
        logger.plot(f"Final Corner Plot of Observables", plt, close_plot=True)
    else:
        plt.savefig(filename)

    plt.clf()
    pass


def plot_mass_splitting(results, logger=None, filename=None):
    if filename is None:
        filename = "LHC_mass_splitting_constraints.png"
    lhc_limits = [
        [88.55035895054833, 0.5670642592102549],
        [90.72234483327449, 0.6053129714399562],
        [92.94760574199343, 0.6433230337004762],
        [95.22744842018685, 0.680406859960321],
        [97.56321166347519, 0.7161413120300887],
        [99.95626710580079, 0.7526549290094838],
        [102.40802002489447, 0.7887282015576418],
        [104.91991016749942, 0.8261290145340893],
        [107.4934125948353, 0.8657237556998038],
        [110.13003854880158, 0.907216195046309],
        [112.83133633942559, 0.9530090461062398],
        [115.59889225408003, 1.0040352830200583],
        [118.43433148900007, 1.063977324460528],
        [121.33931910365085, 1.1313381878612727],
        [124.31556099850211, 1.208821176696358],
        [192.99717900969895, 1.2425811138473697],
        [197.80367463792572, 1.2428131810571446],
        [202.87879505326254, 1.2430522209477566],
        [207.0172843957093, 1.2487908091822282],
        [127.36480491678722, 1.2953806199202333],
        [130.48884147083356, 1.3942200230541741],
        [133.6895051935658, 1.5027893107009278],
        [136.96867561580243, 1.6145761023819565],
        [140.3282783699748, 1.724875743875022],
        [143.7702863209202, 1.8385382032233133],
        [147.2967207244094, 1.9416876994721994],
        [150.90965241409285, 2.0406877707725846],
        [154.6112030175586, 2.1374554297801622],
        [158.40354620222024, 2.2301287814827706],
        [162.28890895176158, 2.3358795702905106],
        [166.2695728738933, 2.4277037699133825],
        [170.34787554018376, 2.5521039056307506],
        [174.52621185875594, 2.705124306516104],
        [178.4135690181875, 2.911951933692838],
        [181.5857047843744, 3.219431267323748],
        [184.001764278372, 3.6324492684527394],
        [186.03968545673723, 4.125376449037445],
        [188.3074779772572, 4.674398104485784],
        [191.39182809458356, 5.26748837063294],
        [194.41959494650024, 5.919968719198939],
        [198.53125674135052, 6.640513143872885],
        [203.17696628202063, 7.409428366871068],
        [207.93138725428332, 8.287480812264121],
        [211.86157032320781, 9.230038492983287],
        [212.79706354842222, 10.111628466355024],
        [208.61961224729797, 11.592052428577716],
        [203.62504499384275, 12.423582341957495],
        [198.75005279750036, 13.077600226002522],
        [193.99177290889537, 13.6661116334896],
        [189.3474111158061, 14.274171719017842],
        [184.81424010231345, 14.825035501814199],
        [180.3895978472364, 15.469625048462946],
        [176.07088606090753, 16.030245045869997],
        [171.85556865937667, 16.597739546870557],
        [167.74117027514168, 17.190890154321018],
        [163.72527480353415, 17.736182733811788],
        [159.8055239839068, 18.325456643579148],
        [155.97961601478866, 18.882263384033166],
        [152.24530420219426, 19.42765736649598],
        [148.6003956402934, 19.9790974837178],
        [145.0427499236689, 20.476447846702087],
        [141.5702778904014, 21.02699389103638],
        [138.180940395249, 21.55043009993911],
        [134.87274711219538, 22.108363852793836],
        [131.64375536566885, 22.63671741772647],
        [128.49206898974063, 23.200225335621866],
        [125.41583721463746, 23.78931355247043],
        [122.41325357991013, 24.38151366261607],
        [119.48255487362384, 24.98845572694559],
        [116.62202009694349, 25.67278244699209],
        [113.82996945350962, 26.375849943374938],
        [111.10476336300867, 27.124509522356533],
        [108.4448014983592, 27.867333602289115],
        [105.8485218459501, 28.61659687274232],
        [103.31439978837606, 29.386005430737644],
        [100.84094720913484, 30.088282669878428],
    ]
    lhc_limits = onp.array(lhc_limits)
    # lhc_limits x axis is slepton mass rather than dm
    lhc_limits[:, 0] = lhc_limits[:, 0] - lhc_limits[:, 1]
    slepton_masses = onp.array(
        [results["msel"], results["msml"], results["mser"], results["msmr"]]
    ).T

    # ? What's a negative neutralino mass?
    slepton_masses = onp.abs(slepton_masses)
    chi_masses = onp.abs(results["mneut1"])

    lightest_sleptons = onp.min(slepton_masses, axis=1)
    mass_splitting = lightest_sleptons - chi_masses

    plt.scatter(
        chi_masses,
        mass_splitting,
        marker=".",
        c=results["pval_xenon1T"],
    )

    plt.plot(*lhc_limits.T, color="maroon", label="ATLAS")

    plt.ylabel(r"$M_{\ell} - M_{\chi}$ (GeV)")
    plt.xlabel(r"$M_\chi$ (GeV)")
    plt.xlim(85, 1000)
    plt.ylim(0.1, 250)
    plt.yscale("log")

    plt.legend()
    plt.colorbar()
    if hasattr(logger, "plot"):
        logger.plot(f"Final Corner Plot of Observables", plt, close_plot=True)
    else:
        plt.savefig(filename)

    plt.clf()
    pass


def prior_plotter(sample_prior, key=345, n_samples=10000, logger=None, filename=None):
    """
    A corner plot of all model parameters in the prior.
    This is useful for checking that the prior is reasonable and when
    comparing with the posterior to see how much has been learned.
    """
    if filename is None:
        filename = "prior_plot.png"
    prior_rng_key = jax.random.PRNGKey(key)
    prior_samples = sample_prior(prior_rng_key, n_samples)

    # samples are unitless. let's scale them to the true values
    unitful_samples = theta_addunits(prior_samples)
    # ignore squarks
    unitful_samples = onp.delete(unitful_samples, slice(11, 20), 1)

    labels = [
        r"$\mu$",
        r"$M_1$",
        r"$M_2$",
        r"$M_3$",
        r"$M_{L_1}$",
        r"$M_{L_2}$",
        r"$M_{L_3}$",
        r"$M_{r_1}$",
        r"$M_{r_2}$",
        r"$M_{r_3}$",
        r"$M_A$",
        r"$\tan\beta$",
        r"$A_t$",
        r"$A_b$",
        r"$A_{\tau}$",
    ]
    corner.corner(unitful_samples, labels=labels)

    if hasattr(logger, "plot"):
        logger.plot(f"Corner plot of Prior", plt, close_plot=True)
    else:
        plt.savefig(filename)

    plt.clf()
    pass


def filter_observables(params, results, limits):
    """
    Filter params and results to only consider the points which
    fall within the limits of the observables.
    """
    observables = onp.array([results["omega"], results["gmuon"], results["mhsm"]]).T

    mask_idx = onp.all(observables > limits[0], axis=1)
    mask_idx &= onp.all(observables < limits[1], axis=1)

    # filter every key of results
    filtered_results = {key: value[mask_idx] for key, value in results.items()}

    return params[mask_idx], filtered_results


if __name__ == "__main__":
    from lbi.prior import SmoothedBoxPrior

    theta_dim = 15

    log_prior, sample_prior = SmoothedBoxPrior(
        theta_dim=theta_dim, lower=-1.0, upper=1.0, sigma=0.01
    )

    prior_plotter(sample_prior)
